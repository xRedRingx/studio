// These rules are designed for production use.
// They enforce authentication, data validation, and role-based access control.
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    function isAuthenticated() {
      return request.auth != null;
    }
    function isBarber() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'barber';
    }
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // =================================
    // Default Security
    // =================================
    // By default, no one can read or write to any document.
    match /{document=**} {
      allow read, write: if false;
    }

    // =================================
    // Users Collection
    // =================================
    match /users/{userId} {
      // Any authenticated user can read a user's profile (e.g., customer viewing barber).
      allow read: if isAuthenticated();
      
      // A user can only create their own user document.
      allow create: if isOwner(userId);

      // A user can only update their own document.
      // Critical fields like 'role' and 'email' are protected from being changed after creation.
      allow update: if isOwner(userId)
                    && request.resource.data.role == resource.data.role
                    && request.resource.data.email == resource.data.email;
    }

    // =================================
    // Services Collection
    // =================================
    match /services/{serviceId} {
        // Any authenticated user can read services.
        allow read: if isAuthenticated();

        // Only a barber can create a service, and it must be for themselves.
        allow create: if isBarber() && request.resource.data.barberId == request.auth.uid;
        
        // Only the barber who owns the service can update or delete it.
        allow update, delete: if isBarber() && get(/databases/$(database)/documents/services/$(serviceId)).data.barberId == request.auth.uid;
    }

    // =================================
    // Barber Schedules Collection
    // =================================
    match /barberSchedules/{barberId} {
        // **FIX**: Any authenticated user can read a barber's schedule. This is required for booking.
        allow read: if isAuthenticated();

        // Only the barber can write to their own schedule.
        allow write: if isOwner(barberId);
    }
    
    // Subcollection for unavailable dates.
    match /barberSchedules/{barberId}/unavailableDates/{dateId} {
        // Any authenticated user can read unavailable dates.
        allow read: if isAuthenticated();
        
        // Only the barber can write to their own unavailable dates.
        allow write: if isOwner(barberId);
    }

    // =================================
    // Public Barber Data (for Booked Slots)
    // =================================
    // This collection is safe for public read access by any authenticated user.
    match /publicBarberData/{barberId}/bookedSlots/{slotId} {
        allow read: if isAuthenticated();
        // Write access should only be handled by secure Cloud Functions.
        allow write: if false;
    }

    // =================================
    // Appointments Collection
    // =================================
    match /appointments/{appointmentId} {
        // A user can read an appointment only if they are the customer or the barber.
        allow read: if isOwner(resource.data.customerId) || isOwner(resource.data.barberId);

        // A customer can create an appointment for themselves.
        allow create: if isOwner(request.resource.data.customerId)
                        && request.resource.data.status == 'upcoming';

        // Update logic is more complex, based on user role and status transition.
        // A user can only update an appointment they are part of.
        allow update: if (isOwner(resource.data.customerId) || isOwner(resource.data.barberId));

        // Delete access is generally discouraged; use a 'cancelled' status instead.
        allow delete: if false;
    }

    // =================================
    // Spendings Collection
    // =================================
    match /spendings/{spendingId} {
        // A user can read/write spendings only if they are the barber associated with it.
        allow read, write: if isOwner(get(/databases/$(database)/documents/spendings/$(spendingId)).data.barberId);
    }
  }
}
