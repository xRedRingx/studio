
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    // Allow any authenticated user to read and write to their own document.
    // Allow any authenticated user to read other user profiles (e.g., for barber listings).
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      // For simplicity in testing, allow create by anyone authenticated.
      // In production, you'd restrict creation to only during sign-up.
      allow create: if request.auth != null;
    }

    // Services Collection
    // Barbers can manage their own services.
    // Customers can read services.
    match /services/{serviceId} {
      allow read: if request.auth != null;
      // Allow write/create/delete if authenticated (for testing).
      // In production, restrict to only the barber who owns the service.
      allow write, create, delete: if request.auth != null;
      // allow write, create, delete: if request.auth != null && request.resource.data.barberId == request.auth.uid; // Example of a more secure rule
    }

    // Barber Schedules Collection (and subcollections)
    // Barbers manage their own schedule and unavailable dates.
    // Customers can read schedules/unavailable dates for booking.
    match /barberSchedules/{barberId} {
      allow read: if request.auth != null;
      // Allow write/create/delete if authenticated (for testing).
      // In production, restrict to only the barber.
      allow write, create: if request.auth != null;
      // allow write, create: if request.auth != null && barberId == request.auth.uid; // Example of a more secure rule

      match /unavailableDates/{dateId} {
        allow read: if request.auth != null;
        // Allow write/create/delete if authenticated (for testing).
        // In production, restrict to only the barber.
        allow write, create, delete: if request.auth != null;
        // allow write, create, delete: if request.auth != null && get(/databases/$(database)/documents/barberSchedules/$(request.auth.uid)).data.barberId == request.auth.uid; // More complex check
      }
    }

    // Appointments Collection
    // Customers can create their own appointments.
    // Barbers and Customers can read/update their respective appointments.
    match /appointments/{appointmentId} {
      allow read: if request.auth != null; // Might refine to only involved parties in production
      // Allow create/update/delete if authenticated (for testing).
      // In production, more granular control is needed.
      // e.g., customer can create if customerId matches auth.uid
      // e.g., customer can update status to 'cancelled' if customerId matches auth.uid and status is 'upcoming'
      // e.g., barber can update if barberId matches auth.uid
      allow write, create, delete: if request.auth != null;
    }

    // Spendings Collection
    // Barbers can manage their own spending entries.
    match /spendings/{spendingId} {
      allow read: if request.auth != null; // In production, barber should only read their own
      // Allow write/create/delete if authenticated (for testing).
      // In production, restrict to only the barber who owns the entry.
      allow write, create, delete: if request.auth != null;
      // allow write, create, delete: if request.auth != null && request.resource.data.barberId == request.auth.uid; // Example of a more secure rule
    }

    // Default deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
