
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for security rules
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function isBarber(userId) {
      return isUser(userId) && getUserRole(userId) == 'barber';
    }

    // Default Deny All
    match /{document=**} {
      allow read, write: if false;
    }

    // Users Collection Rules
    match /users/{userId} {
      // Allow a user to read their own document fully.
      // Allow any signed-in user to read public-facing fields of any user profile.
      allow read: if isUser(userId) || isSignedIn();

      // Allow a user to create their own user document.
      allow create: if isUser(userId);

      // Allow a user to update their own document, but protect critical fields.
      allow update: if isUser(userId) 
                    && request.resource.data.email == resource.data.email
                    && request.resource.data.role == resource.data.role;
    }

    // Services Collection Rules (barber-specific)
    match /services/{serviceId} {
      // Any authenticated user can read services.
      allow read: if isSignedIn();
      // Only a barber can write (create, update, delete) their own services.
      allow write: if isBarber(request.resource.data.barberId);
    }

    // Barber Schedules Collection Rules
    match /barberSchedules/{barberId} {
      // Any authenticated user can read schedule data for booking purposes.
      allow read: if isSignedIn();
      // Only the barber can write to their own schedule.
      allow write: if isUser(barberId);
      
      // Subcollection for unavailable dates
      match /unavailableDates/{dateId} {
         // Any authenticated user can read unavailable dates for booking.
        allow read: if isSignedIn();
        // Only the barber can manage their own unavailable dates.
        allow write: if isUser(barberId);
      }
    }
    
    // NEW: Public Barber Data for safe availability checks
    match /publicBarberData/{barberId} {
        match /bookedSlots/{slotId} {
            // Any authenticated user can read the anonymized booked slots
            allow read: if isSignedIn();
            // Writes are handled by Cloud Functions, no client writes allowed.
            allow write: if false;
        }
    }

    // Appointments Collection Rules
    match /appointments/{appointmentId} {
      // A user can only read an appointment if they are the customer or the barber for that appointment.
      allow read: if isUser(resource.data.customerId) || isUser(resource.data.barberId);
      
      // A customer can create an appointment for themselves.
      allow create: if isUser(request.resource.data.customerId)
                      && request.resource.data.status == 'upcoming';
                      
      // Rules for updating appointments.
      allow update: if (
        // Customer can update if they are the customer for the appointment
        (isUser(resource.data.customerId) && 
          (
            // Allowed status changes by customer
            request.resource.data.status == 'customer-initiated-check-in' ||
            request.resource.data.status == 'in-progress' ||
            request.resource.data.status == 'customer-initiated-completion' ||
            request.resource.data.status == 'completed' ||
            request.resource.data.status == 'cancelled'
          )
        ) ||
        // Barber can update if they are the barber for the appointment
        (isUser(resource.data.barberId) && 
          (
            // Allowed status changes by barber
            request.resource.data.status == 'barber-initiated-check-in' ||
            request.resource.data.status == 'in-progress' ||
            request.resource.data.status == 'barber-initiated-completion' ||
            request.resource.data.status == 'completed' ||
            request.resource.data.status == 'no-show' ||
            request.resource.data.status == 'cancelled'
          )
        )
      );
    }
    
    // Spendings Collection Rules
    match /spendings/{spendingId} {
        // A barber can read and write their own spending entries.
        allow read, write: if isBarber(request.resource.data.barberId);
    }
  }
}
