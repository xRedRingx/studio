
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =====================================================================
    // Helper Functions (Simplified for Testing)
    // =====================================================================

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // =====================================================================
    // User Profile Rules (Relaxed for Testing)
    // =====================================================================
    match /users/{userId} {
      allow read: if true; // Allow public read for easier testing of barber/customer profiles
      
      // Allow create if signed in and is the owner of the document path
      allow create: if isSignedIn() && isOwner(userId);

      // Allow update if signed in and is the owner
      allow update: if isSignedIn() && isOwner(userId);
      
      // Generally, user documents are not deleted directly, but if needed for testing:
      // allow delete: if isSignedIn() && isOwner(userId); 
    }

    // =====================================================================
    // Services Rules (Relaxed for Testing)
    // =====================================================================
    match /services/{serviceId} {
      allow read: if true; // Public read for services

      // Allow create/update/delete by any authenticated user for testing
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    // =====================================================================
    // Barber Schedule Rules (Relaxed for Testing)
    // =====================================================================
    match /barberSchedules/{barberId} {
        allow read: if true; // Public read for schedules
        
        // Allow write by any authenticated user for testing
        allow write: if isSignedIn(); // Covers create and update

        match /unavailableDates/{dateId} {
            allow read: if true; // Public read for unavailable dates
            
            // Allow create/delete by any authenticated user for testing
            allow create: if isSignedIn();
            allow delete: if isSignedIn();
        }
    }

    // =====================================================================
    // Appointment Rules (Relaxed for Testing)
    // =====================================================================
    match /appointments/{appointmentId} {
      // Allow read by any authenticated user
      allow read: if isSignedIn();

      // Allow create by any authenticated user
      // For testing, we remove checks like role, specific customerId match, barber availability
      allow create: if isSignedIn() &&
                    request.resource.data.barberId is string && // Basic data integrity
                    request.resource.data.serviceId is string &&
                    request.resource.data.date is string &&
                    request.resource.data.startTime is string &&
                    request.resource.data.status is string && // e.g., 'upcoming'
                    request.resource.data.createdAt is timestamp &&
                    request.resource.data.updatedAt is timestamp;

      // Allow update by any authenticated user
      // For testing, we remove complex status transition logic
      allow update: if isSignedIn() &&
                    request.resource.data.updatedAt is timestamp; // Ensure updatedAt is always set

      // Appointments should generally be 'cancelled' via update, not hard deleted by clients
      allow delete: if false; 
    }
  }
}
