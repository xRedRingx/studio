/**
 * @fileoverview ServiceDialog component.
 * This component provides a dialog (modal) for barbers to add a new service
 * or edit an existing one. It includes fields for service name, price, and duration.
 * Uses `react-hook-form` for form handling and Zod for validation.
 */
'use client';

import { zodResolver } from '@hookform/resolvers/zod'; // Resolver for Zod schema validation.
import { useForm } from 'react-hook-form'; // Hook for form handling.
import * as z from 'zod'; // Zod library for schema declaration and validation.
import { Button } from '@/components/ui/button'; // Button UI component.
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogClose, // Used for the "Cancel" button.
} from '@/components/ui/dialog'; // Dialog UI components.
import { Input } from '@/components/ui/input'; // Input UI component.
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'; // Form UI components.
import type { BarberService } from '@/types'; // Type definition for a barber service.
import { useEffect } from 'react'; // React hook for side effects.
import LoadingSpinner from '@/components/ui/loading-spinner'; // Loading spinner UI.

// Zod schema for validating service form inputs.
const serviceSchema = z.object({
  name: z.string().min(1, 'Service name is required').max(100, 'Service name is too long'),
  price: z.coerce.number() // Coerces input to a number.
    .finite({ message: 'Price must be a valid number.' })
    .min(0, 'Price must be a non-negative number.')
    .max(10000, 'Price seems too high.'), // Basic upper bound sanity check.
  duration: z.coerce.number() // Coerces input to a number.
    .finite({ message: 'Duration must be a valid number.' })
    .int('Duration must be a whole number.') // Duration should be an integer.
    .min(5, 'Duration must be at least 5 minutes.')
    .max(720, 'Duration is too long (max 12 hours).'), // Max duration of 12 hours (720 mins).
});

// Type for form values, excluding fields automatically generated by the backend.
type ServiceFormValues = Omit<BarberService, 'id' | 'barberId' | 'createdAt' | 'updatedAt'>;

/**
 * Props for the ServiceDialog component.
 * @interface ServiceDialogProps
 * @property {boolean} isOpen - Controls the visibility of the dialog.
 * @property {() => void} onClose - Callback function to close the dialog.
 * @property {(service: ServiceFormValues, id?: string) => Promise<void>} onSubmit - Callback function to handle form submission (add or update).
 * @property {BarberService | null} [serviceToEdit] - Optional. The service data to prefill the form for editing. If null/undefined, the dialog is for adding a new service.
 * @property {boolean} isSubmitting - True if the form submission is currently in progress.
 */
interface ServiceDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (service: ServiceFormValues, id?: string) => Promise<void>;
  serviceToEdit?: BarberService | null;
  isSubmitting: boolean;
}

/**
 * ServiceDialog component.
 * Renders a dialog for adding or editing a barber service.
 *
 * @param {ServiceDialogProps} props - The component's props.
 * @returns {JSX.Element | null} The rendered dialog or null if not open.
 */
export default function ServiceDialog({ isOpen, onClose, onSubmit, serviceToEdit, isSubmitting }: ServiceDialogProps) {
  // Initialize react-hook-form with Zod resolver and default values.
  const form = useForm<ServiceFormValues>({
    resolver: zodResolver(serviceSchema),
    defaultValues: {
      name: '',
      price: 0,
      duration: 30, // Default duration to 30 minutes.
    },
  });

  // Effect to reset form fields when the dialog opens or when `serviceToEdit` changes.
  // This ensures the form is prefilled correctly for editing or cleared for adding.
  useEffect(() => {
    if (isOpen) { // Only reset if the dialog is open to avoid unnecessary resets.
      if (serviceToEdit) {
        // If editing, reset form with existing service data.
        form.reset({
          name: serviceToEdit.name,
          price: serviceToEdit.price,
          duration: serviceToEdit.duration,
        });
      } else {
        // If adding, reset form to default empty/initial values.
        form.reset({ name: '', price: 0, duration: 30 });
      }
    }
  }, [serviceToEdit, form, isOpen]); // Dependencies for the effect.

  /**
   * Handles the form submission. Calls the `onSubmit` prop with form values and service ID (if editing).
   * @param {ServiceFormValues} values - The validated form values.
   */
  const handleSubmit = async (values: ServiceFormValues) => {
    await onSubmit(values, serviceToEdit?.id);
  };

  // Do not render the dialog if it's not open.
  if (!isOpen) return null;

  return (
    // Dialog component from ShadCN UI.
    // `onOpenChange` is used to handle closing the dialog via escape key or overlay click.
    // Prevents closing if `isSubmitting` is true.
    <Dialog open={isOpen} onOpenChange={(open) => !open && !isSubmitting && onClose()}>
      <DialogContent className="sm:max-w-md rounded-xl"> {/* Dialog content container. */}
        <DialogHeader className="p-6 pb-4">
          <DialogTitle className="text-xl font-bold">{serviceToEdit ? 'Edit Service' : 'Add New Service'}</DialogTitle>
          <DialogDescription className="text-sm text-gray-500 pt-1">
            {serviceToEdit ? 'Update the details of your service.' : 'Fill in the details for your new service.'}
          </DialogDescription>
        </DialogHeader>
        {/* Form for service details. */}
        <Form {...form}>
          <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-4 px-6 pb-6">
            {/* Service Name Field */}
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-base">Service Name</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., Men's Haircut" {...field} disabled={isSubmitting} className="h-11 text-base rounded-md" />
                  </FormControl>
                  <FormMessage /> {/* Displays validation errors. */}
                </FormItem>
              )}
            />
            {/* Price Field */}
            <FormField
              control={form.control}
              name="price"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-base">Price ($)</FormLabel>
                  <FormControl>
                    <Input type="number" placeholder="e.g., 30" {...field} step="0.01" disabled={isSubmitting} className="h-11 text-base rounded-md"/>
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            {/* Duration Field */}
            <FormField
              control={form.control}
              name="duration"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-base">Duration (minutes)</FormLabel>
                  <FormControl>
                    <Input type="number" placeholder="e.g., 30" {...field} step="5" disabled={isSubmitting} className="h-11 text-base rounded-md"/>
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            {/* Dialog Footer with action buttons. */}
            <DialogFooter className="pt-4">
              {/* Cancel Button */}
              <DialogClose asChild>
                <Button type="button" variant="outline" className="rounded-full h-11 px-6 text-base" disabled={isSubmitting} onClick={onClose}>Cancel</Button>
              </DialogClose>
              {/* Submit Button (Add/Save Changes) */}
              <Button type="submit" className="rounded-full h-11 px-6 text-base" disabled={isSubmitting}>
                {isSubmitting ? <LoadingSpinner className="mr-2 h-4 w-4" /> : null} {/* Show spinner if submitting. */}
                {isSubmitting ? (serviceToEdit ? 'Saving...' : 'Adding...') : (serviceToEdit ? 'Save Changes' : 'Add Service')}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
